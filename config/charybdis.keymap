#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/ext_power.h>
#include "macros.dtsi"
#include "behaviors.dtsi"
#include "combos.dtsi"

/ {
    /* input config for mouse move mode */
    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <5>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <4>;
        scale-divisor = <5>;
        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */
    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <6>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <6>;
    };

    /* input config for mouse scroll mode */
    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <7>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        y-invert;
        bindings = <&ib_wheel_scaler 1 14>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */
    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */
    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };
// ╭──────┬──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────┬──────╮
//    00     01     02     03    04      05        06     07     08     09     10     11
// ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
//    12     13     14     15    16      17        18     19     20     21     22     23
// ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
//    24     25     26     27    28      29        30     31     32     33     34     35
// ╰──────┴──────┴──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┴──────┴──────┴──────╯
//                         36     37     38        39     40
//                      ╰──────┴──────┴──────╯  ╰──────┴──────╯
// #define BASE    0
// #define NAV     1
// #define NUM     2
// #define SYM     3
// #define ADJUST  4

// #define MOUSE   5
// #define SLOW    6
// #define SCROLL  7

    keymap {
        compatible = "zmk,keymap";

	BASE {
	    bindings = <
   &kp Q       &kp W      &kp E      &kp R      &kp T     &kp Y    &kp U       &kp I      &kp O      &kp P
   &hm LGUI A  &hm LALT S &hm LCTL D &hm LSFT F &kp G     &kp H    &hm LSFT J  &hm LCTL K &hm LALT L &hm LGUI SCLN
   &lt 4 Z &kp X &kp C      &kp V      &kp B                &kp N    &kp M       &kp CMMA   &kp DOT    &kp FSLH
               &lt 5 TAB &lt 2 BKSP &lt 3 DEL               &kp RET  &lt 1 SPC //&lt 4 ESC
			>;
	};

	nav {
	    bindings = <
	&trans &trans &trans &trans &trans         &trans &kp HOME  &kp PGDN &kp PGUP  &kp END
	&trans &trans &trans &trans &trans         &trans &kp LARW  &kp DARW &kp UARW  &kp RARW
	&trans &trans &trans &trans &trans         &trans &kp ESC   &trans   &trans    &trans
                      &trans &trans &trans         &trans &trans
			>;
	};


        nums {
 	     bindings = <
	&trans &trans &trans   &trans  &trans      &kp EQL   &kp NUM_7  &kp NUM_8  &kp NUM_9   &kp NUM_0
	&trans &trans &trans   &trans  &kp GRAV    &kp MINUS &kp NUM_4  &kp NUM_5  &kp NUM_6   &trans
	&trans &trans &kp BKSP &kp DEL &kp TILD    &kp AMPS  &kp NUM_1  &kp NUM_2  &kp NUM_3   &kp DOT
                      &trans &trans &trans         &trans    &trans
			>;
	};

	symb {
	     bindings = <
	&trans &trans &trans &trans &trans &trans       &kp TILD    &kp LBRC  &kp RBRC  &kp GRAVE   &trans
	&trans &trans &trans &trans &trans &trans       &kp PIPE    &kp LBKT  &kp RBKT  &kp LT      &kp GT
	&trans &trans &trans &trans &trans &kp TILD     &kp AMPS    &kp LPRN  &kp RPRN  &kp QUOT    &kp BSLH
	                     &trans &trans &trans            &trans  &trans
			>;
		};

	adjust {
	     bindings = <
        &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4    &trans &kp F7  &kp F8  &kp F9   &kp F12
	&trans &trans &trans &trans &trans                                  &trans &kp F4  &kp F5  &kp F6   &kp F11
	&bt BT_CLR &trans &trans &trans &trans                              &trans &kp F1  &kp F2  &kp F3   &kp F10
	                  &trans &trans &trans                              &trans  &trans
			>;
        };

        MOUSE {
            bindings = <
	&trans &trans &trans &trans &trans &trans       &trans &trans &trans &trans &trans &trans
	&trans &mkp MB1 &mkp MB2 &mk MB3   &trans       &trans &trans &trans &trans &trans &trans
	&trans &trans &trans &trans &trans &trans       &trans &trans &trans &trans &trans &trans
	                     &trans &trans &trans       &trans  &trans
            >;
        };

        SLOW {
            bindings = <
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
                              &trans    &trans    &trans    &trans    &trans
            >;
        };

        SCROLL {
            bindings = <
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
                              &trans    &trans    &trans    &trans    &trans
            >;
        };
    };
};