#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/mouse.h>
#include <dt-bindings/zmk/outputs.h>
#include <dt-bindings/zmk/input_transform.h>

#include <behaviors/mouse_keys.dtsi>
#include <dt-bindings/zmk/ext_power.h>

#include <input/processors.dtsi>
#include <input/processors/report_rate_limit.dtsi>
#include <input/processors/xyz.dtsi>


#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/36.h"                                      // Source key-labels.
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LM0 LM1 LM2 LM3 LM4 LB0 LB1 LB2 LB3 LB4  // Left-hand keys.
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RM0 RM1 RM2 RM3 RM4 RB0 RB1 RB2 RB3 RB4  // Right-hand keys.
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2                                      // Thumb keys.


#define BASE    0
#define NAV     1
#define NUM     2
#define SYM     3
#define ADJUST  4

#define MOUSE   5
#define SLOW    6
#define SCROLL  7
#define HSCROLL  8

#define FUNC  9


ZMK_MOD_MORPH(mm_lbracket_brace,
    bindings = <&kp LBKT>, <&kp LBRC>;
    mods = <(MOD_LCTL)>;
)

ZMK_MOD_MORPH(mm_lbracket,
    bindings = <&kp LPRN>, <&mm_lbracket_brace>;
    mods = <(MOD_LSFT)>;
)

ZMK_MOD_MORPH(mm_rbracket_brace,
    bindings = <&kp RBKT>, <&kp RBRC>;
    mods = <(MOD_LCTL)>;
)

ZMK_MOD_MORPH(mm_rbracket,
    bindings = <&kp RPRN>, <&mm_rbracket_brace>;
    mods = <(MOD_LSFT)>;
)

ZMK_MOD_MORPH(mm_del_num,
    bindings = <&lt NAV BSPC>, <&kp DEL>;
    mods = <(MOD_RSFT)>;
)

#include "combos.dtsi" // Must be sourced after HRM-combo hack.


/ {

    xy_transf: xy_transf {
            compatible = "zmk,input-processor-transform";
            #input-processor-cells = <1>;
            type = <INPUT_EV_REL>;
            x-codes = <INPUT_REL_X>, <INPUT_REL_WHEEL>;
            y-codes = <INPUT_REL_Y>, <INPUT_REL_HWHEEL>;
    };
    xy_scaler: xy_scaler {
            compatible = "zmk,input-processor-scaler";
            #input-processor-cells = <2>;
            type = <INPUT_EV_REL>;
            codes = <INPUT_REL_X>, <INPUT_REL_Y>;
            track-remainders;
    };
    x_scaler: x_scaler {
            compatible = "zmk,input-processor-scaler";
            #input-processor-cells = <2>;
            type = <INPUT_EV_REL>;
            codes = <INPUT_REL_X>;
    };
    y_scaler: y_scaler {
        compatible = "zmk,input-processor-scaler";
        #input-processor-cells = <2>;
        type = <INPUT_EV_REL>;
        codes = <INPUT_REL_Y>;
    };
    to_wheel: to_wheel {
            compatible = "zmk,input-processor-code-mapper";
            #input-processor-cells = <0>;
            type = <INPUT_EV_REL>;
            map = <INPUT_REL_X INPUT_REL_HWHEEL>
                , <INPUT_REL_Y INPUT_REL_WHEEL>;
    };


    tball1_il {
            compatible = "zmk,input-listener";
            device = <&trackball>;
            input-processors = <&xy_scaler 3 5>;
            precise {
                    layers = <6>;
                    process-next;
                    input-processors = <&xy_scaler 1 6>;
            };
            scroll {
                    layers = <7>;
                    process-next;
                    input-processors = <&xy_transf (INPUT_TRANSFORM_Y_INVERT)>
                                     , <&xy_scaler 1 64>, <&x_scaler 0 1>
                                     , <&to_wheel>;
            };
            hscroll {
                    layers = <8>;
                    process-next;
                    input-processors = <&xy_transf (INPUT_TRANSFORM_X_INVERT)>
                                     , <&xy_scaler 1 64>, <&y_scaler 0 1>
                                     , <&to_wheel>;
            };
    };


    behaviors {
        hm: homerow_mod {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <150>; // triggers the hold behavior when the tapping-term-ms has expired
            quick-tap-ms = <100>; // If you press a tapped hold-tap again within quick-tap-ms milliseconds of the first press, it will always trigger the tap behavior.
            //require-prior-idle-ms = <185>; // like quick-tap-ms however it will apply for any non-modifier key pressed before it
            bindings = <&kp>, <&kp>;  // hold, tap
        };
    };

/*                KEY POSITIONS

  ╭────────────────────╮ ╭────────────────────╮
  │  0   1   2   3   4 │ │  5   6   7   8   9 │
  │ 10  11  12  13  14 │ │ 15  16  17  18  19 │
  │ 20  21  22  23  24 │ │ 25  26  27  28  29 │
  ╰───────╮ 30  31  32 │ │ 33  34 ╭───────────╯
          ╰────────────╯ ╰────────╯            */


    keymap {
        compatible = "zmk,keymap";

	BASE {
	    bindings = <
   &kp Q       &kp W      &kp E      &kp R      &kp T         &kp Y    &kp U       &kp I      &kp O      &hm RALT P
   &hm LGUI A  &hm LALT S &hm LCTL D &hm LSFT F &kp G         &kp H    &hm RSFT J  &hm RCTL K &hm RALT L &hm RGUI SCLN
   &lt MOUSE Z &kp X      &kp C      &kp V      &kp B         &kp N    &kp M       &kp CMMA   &kp DOT    &lt MOUSE FSLH
               &lt ADJUST ESC &lt NUM SPC &lt SYM TAB             &lt FUNC RET  &mm_del_num
			>;
	};

	NAV {
	    bindings = <
	&trans &trans &trans &trans &trans         &kp HOME  &kp PGDN &kp PGUP  &kp END  &trans 
	&trans &trans &trans &trans &trans         &kp LARW  &kp DARW &kp UARW  &kp RARW &trans 
	&trans &trans &trans &trans &trans         &trans    &trans   &trans    &trans   &trans 
                      &trans &trans &trans         &trans &trans
			>;
	};


        NUM {
 	     bindings = <
	&trans &trans &trans &trans &trans      &kp EQUAL       &kp NUM_7  &kp NUM_8  &kp NUM_9   &kp MINUS
	&trans &trans &trans &trans &trans      &kp KP_MULTIPLY &kp NUM_4  &kp NUM_5  &kp NUM_6   &kp PLUS
	&trans &trans &trans &trans &trans      &kp KP_DIVIDE   &kp NUM_1  &kp NUM_2  &kp NUM_3   &kp DOT
                      &trans &trans &trans         &trans &kp NUM_0
			>;
	};

	SYM {
	     bindings = <
	&trans &trans &trans &trans &trans       &kp TILD    &kp LBRC  &kp RBRC  &kp GRAVE   &kp UNDERSCORE
	&trans &trans &trans &trans &trans       &kp PIPE    &kp LPAR  &kp RPAR  &kp LT      &kp GT
	&trans &trans &trans &trans &trans       &kp AMPS    &kp LBKT  &kp RBKT  &kp QUOT    &kp BSLH
	         &trans &trans &trans            &trans      &trans
			>;
		};

	ADJUST {
	     bindings = <
    &trans &trans &trans &trans &trans    &bt BT_SEL 0 &bt BT_SEL 1 &bt BT_SEL 2 &bt BT_SEL 3 &bt BT_SEL 4
	&trans &trans &trans &trans &trans                                  &trans &trans &trans &trans &trans
	&trans &trans &trans &trans &trans                              &trans &trans &trans &trans &bt BT_CLR
	                  &trans &trans &trans                              &trans  &trans
			>;
        };

        MOUSE {
            bindings = <
	&trans &trans     &trans   &trans &trans              &trans &trans      &trans   &trans     &trans
	&trans &trans     &trans   &trans &trans              &trans &trans      &trans   &trans     &trans
	&trans &mo SCROLL &mo SLOW &mo HSCROLL &trans         &trans &mo HSCROLL &mo SLOW &mo SCROLL &trans
	            &mkp MB3 &mkp MB1 &mkp MB2       &mkp MB2  &mkp MB1
            >;
        };

        SLOW {
            bindings = <
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans   
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans   
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans  
                    &trans    &trans    &trans    &trans    &trans
            >;
        };

        SCROLL {
            bindings = <
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans   
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans   
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans  
                    &trans    &trans    &trans    &trans    &trans
            >;
        };

        HSCROLL {
            bindings = <
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans   
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans   
&trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans  
                    &trans    &trans    &trans    &trans    &trans
            >;
        };

        FUNC {
	     bindings = <
    &trans &trans &trans &trans &trans                            &trans &kp F7  &kp F8  &kp F9   &kp F12
    &kp C_PREV &kp C_VOL_DN &kp C_MUTE &kp C_VOL_UP &kp C_NEXT    &trans &kp F4  &kp F5  &kp F6   &kp F11
    &trans &trans &trans &trans &trans                            &trans &kp F1  &kp F2  &kp F3   &kp F10
                          &trans &kp C_PP &kp C_STOP                              &trans  &trans
			>;
        };


    };
};
